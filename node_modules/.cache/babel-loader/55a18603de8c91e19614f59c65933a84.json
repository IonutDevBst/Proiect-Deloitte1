{"ast":null,"code":"var _jsxFileName = \"/Users/iariton/Documents/React all project/reactapp/src/components/ScollingList/ScrollingList.js\";\nimport PersonCard from \"../PersonCard/PersonCard\";\nimport { useInView } from \"react-intersection-observer\";\nimport React, { useState, useEffect, createRef } from \"react\";\nexport default function ScollingList(props) {\n  const {\n    ref,\n    inView,\n    entry\n  } = useInView({\n    /* Optional options */\n    threshold: 1\n  });\n  const [activeCard, setActiveCard] = useState(0);\n  const [lastCard, setLastCard] = useState(10);\n  const [isLoading, setIsLoading] = useState(false); //sets the state and resets it on the second click on the same card\n\n  const onCardClickHandler = person => {\n    if (person.id === activeCard) setActiveCard(0);else setActiveCard(person.id);\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (inView) {\n        setIsLoading(true);\n        await new Promise(res => setTimeout(res, 1000));\n        setLastCard(prev => prev + 10);\n        setIsLoading(false);\n      }\n    })();\n  }, [inView]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, props.data.map((person, index) => {\n    console.log(index === lastCard);\n    if (index > lastCard) return null;else return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(PersonCard, {\n      person: person,\n      handler: onCardClickHandler,\n      isActive: person.id === activeCard,\n      setRef: index === lastCard ? ref : createRef(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }\n    }));\n  }), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      fontSize: \"40px\",\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, \"IS LOADING NOW\"));\n}","map":{"version":3,"sources":["/Users/iariton/Documents/React all project/reactapp/src/components/ScollingList/ScrollingList.js"],"names":["PersonCard","useInView","React","useState","useEffect","createRef","ScollingList","props","ref","inView","entry","threshold","activeCard","setActiveCard","lastCard","setLastCard","isLoading","setIsLoading","onCardClickHandler","person","id","Promise","res","setTimeout","prev","data","map","index","console","log","fontSize","textAlign"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,0BAAvB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,OAAtD;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC1C,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,MAAP;AAAeC,IAAAA;AAAf,MAAyBT,SAAS,CAAC;AACvC;AACAU,IAAAA,SAAS,EAAE;AAF4B,GAAD,CAAxC;AAIA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C,CAP0C,CAS1C;;AACA,QAAMe,kBAAkB,GAAIC,MAAD,IAAY;AACrC,QAAIA,MAAM,CAACC,EAAP,KAAcR,UAAlB,EAA8BC,aAAa,CAAC,CAAD,CAAb,CAA9B,KACKA,aAAa,CAACM,MAAM,CAACC,EAAR,CAAb;AACN,GAHD;;AAKAhB,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,UAAIK,MAAJ,EAAY;AACVQ,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,cAAM,IAAII,OAAJ,CAAaC,GAAD,IAASC,UAAU,CAACD,GAAD,EAAM,IAAN,CAA/B,CAAN;AACAP,QAAAA,WAAW,CAAES,IAAD,IAAUA,IAAI,GAAG,EAAlB,CAAX;AACAP,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KAPD;AAQD,GATQ,EASN,CAACR,MAAD,CATM,CAAT;AAWA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,KAAK,CAACkB,IAAN,CAAWC,GAAX,CAAe,CAACP,MAAD,EAASQ,KAAT,KAAmB;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,KAAKb,QAAtB;AACA,QAAIa,KAAK,GAAGb,QAAZ,EAAsB,OAAO,IAAP,CAAtB,KAEE,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AACE,MAAA,MAAM,EAAEK,MADV;AAEE,MAAA,OAAO,EAAED,kBAFX;AAGE,MAAA,QAAQ,EAAEC,MAAM,CAACC,EAAP,KAAcR,UAH1B;AAIE,MAAA,MAAM,EAAEe,KAAK,KAAKb,QAAV,GAAqBN,GAArB,GAA2BH,SAAS,EAJ9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAUH,GAdA,CADH,EAgBGW,SAAS,iBACR;AAAG,IAAA,KAAK,EAAE;AAAEc,MAAAA,QAAQ,EAAE,MAAZ;AAAoBC,MAAAA,SAAS,EAAE;AAA/B,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAjBJ,CADF;AAsBD","sourcesContent":["import PersonCard from \"../PersonCard/PersonCard\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport React, { useState, useEffect, createRef } from \"react\";\r\n\r\nexport default function ScollingList(props) {\r\n  const { ref, inView, entry } = useInView({\r\n    /* Optional options */\r\n    threshold: 1,\r\n  });\r\n  const [activeCard, setActiveCard] = useState(0);\r\n  const [lastCard, setLastCard] = useState(10);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  //sets the state and resets it on the second click on the same card\r\n  const onCardClickHandler = (person) => {\r\n    if (person.id === activeCard) setActiveCard(0);\r\n    else setActiveCard(person.id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (inView) {\r\n        setIsLoading(true);\r\n        await new Promise((res) => setTimeout(res, 1000));\r\n        setLastCard((prev) => prev + 10);\r\n        setIsLoading(false);\r\n      }\r\n    })();\r\n  }, [inView]);\r\n\r\n  return (\r\n    <div>\r\n      {props.data.map((person, index) => {\r\n        console.log(index === lastCard);\r\n        if (index > lastCard) return null;\r\n        else\r\n          return (\r\n            <div>\r\n              <PersonCard\r\n                person={person}\r\n                handler={onCardClickHandler}\r\n                isActive={person.id === activeCard}\r\n                setRef={index === lastCard ? ref : createRef()}\r\n              ></PersonCard>\r\n            </div>\r\n          );\r\n      })}\r\n      {isLoading && (\r\n        <p style={{ fontSize: \"40px\", textAlign: \"center\" }}>IS LOADING NOW</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}